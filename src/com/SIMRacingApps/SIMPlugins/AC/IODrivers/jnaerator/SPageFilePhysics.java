package com.SIMRacingApps.SIMPlugins.AC.IODrivers.jnaerator;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : SharedFileOut.h:63</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
// TODO make all fields volatile
public class SPageFilePhysics extends Structure {
  public volatile int packetId;
  public volatile float gas;
  public volatile float brake;
  public volatile float fuel;
  public volatile int gear;
  public volatile int rpms;
  public volatile float steerAngle;
  public volatile float speedKmh;
  /**
   * C type : float[3]
   */
  public volatile float[] velocity = new float[3];
  /**
   * C type : float[3]
   */
  public volatile float[] accG = new float[3];
  /**
   * C type : float[4]
   */
  public volatile float[] wheelSlip = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] wheelLoad = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] wheelsPressure = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] wheelAngularSpeed = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] tyreWear = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] tyreDirtyLevel = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] tyreCoreTemperature = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] camberRAD = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] suspensionTravel = new float[4];
  public volatile float drs;
  public volatile float tc;
  public volatile float heading;
  public volatile float pitch;
  public volatile float roll;
  public volatile float cgHeight;
  /**
   * C type : float[5]
   */
  public volatile float[] carDamage = new float[5];
  public volatile int numberOfTyresOut;
  public volatile int pitLimiterOn;
  public volatile float abs;
  public volatile float kersCharge;
  public volatile float kersInput;
  public volatile int autoShifterOn;
  /**
   * C type : float[2]
   */
  public volatile float[] rideHeight = new float[2];
  public volatile float turboBoost;
  public volatile float ballast;
  public volatile float airDensity;
  public volatile float airTemp;
  public volatile float roadTemp;
  /**
   * C type : float[3]
   */
  public volatile float[] localAngularVel = new float[3];
  public volatile float finalFF;
  public volatile float performanceMeter;
  public volatile int engineBrake;
  public volatile int ersRecoveryLevel;
  public volatile int ersPowerLevel;
  public volatile int ersHeatCharging;
  public volatile int ersIsCharging;
  public volatile float kersCurrentKJ;
  public volatile int drsAvailable;
  public volatile int drsEnabled;
  /**
   * C type : float[4]
   */
  public volatile float[] brakeTemp = new float[4];
  public volatile float clutch;
  /**
   * C type : float[4]
   */
  public volatile float[] tyreTempI = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] tyreTempM = new float[4];
  /**
   * C type : float[4]
   */
  public volatile float[] tyreTempO = new float[4];
  public volatile int isAIControlled;
  /**
   * C type : float[4][3]
   */
  public volatile float[] tyreContactPoint = new float[((4) * (3))];
  /**
   * C type : float[4][3]
   */
  public volatile float[] tyreContactNormal = new float[((4) * (3))];
  /**
   * C type : float[4][3]
   */
  public volatile float[] tyreContactHeading = new float[((4) * (3))];
  public volatile float brakeBias;

  public SPageFilePhysics() {
    super();
  }

  protected List<String> getFieldOrder() {
    return Arrays
        .asList("packetId", "gas", "brake", "fuel", "gear", "rpms", "steerAngle", "speedKmh",
            "velocity", "accG", "wheelSlip", "wheelLoad", "wheelsPressure", "wheelAngularSpeed",
            "tyreWear", "tyreDirtyLevel", "tyreCoreTemperature", "camberRAD", "suspensionTravel",
            "drs", "tc", "heading", "pitch", "roll", "cgHeight", "carDamage", "numberOfTyresOut",
            "pitLimiterOn", "abs", "kersCharge", "kersInput", "autoShifterOn", "rideHeight",
            "turboBoost", "ballast", "airDensity", "airTemp", "roadTemp", "localAngularVel",
            "finalFF", "performanceMeter", "engineBrake", "ersRecoveryLevel", "ersPowerLevel",
            "ersHeatCharging", "ersIsCharging", "kersCurrentKJ", "drsAvailable", "drsEnabled",
            "brakeTemp", "clutch", "tyreTempI", "tyreTempM", "tyreTempO", "isAIControlled",
            "tyreContactPoint", "tyreContactNormal", "tyreContactHeading", "brakeBias");
  }

  public SPageFilePhysics(Pointer peer) {
    super(peer);
  }

  public static class ByReference extends SPageFilePhysics implements Structure.ByReference {

  }

  public static class ByValue extends SPageFilePhysics implements Structure.ByValue {

  }
}
